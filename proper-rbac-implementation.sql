-- PROPER SUPABASE RBAC IMPLEMENTATION
-- This follows Supabase best practices for custom claims and RBAC
-- Run this in Supabase SQL Editor

-- 1. First, disable RLS on users table to stop infinite recursion
ALTER TABLE public.users DISABLE ROW LEVEL SECURITY;

-- Drop all existing problematic policies
DROP POLICY IF EXISTS "Users can view own events" ON public.events;
DROP POLICY IF EXISTS "Anyone can view approved events" ON public.events;
DROP POLICY IF EXISTS "Sellers can create events" ON public.events;
DROP POLICY IF EXISTS "Admins can manage events" ON public.events;
DROP POLICY IF EXISTS "Users can update own events" ON public.events;
DROP POLICY IF EXISTS "Admins can update all events" ON public.events;
DROP POLICY IF EXISTS "Admins can view all events" ON public.events;
DROP POLICY IF EXISTS "Event creators can manage events" ON public.events;
DROP POLICY IF EXISTS "Users can view own data" ON public.users;
DROP POLICY IF EXISTS "Users can update own data" ON public.users;
DROP POLICY IF EXISTS "Users can view own profile" ON public.users;
DROP POLICY IF EXISTS "Users can update own profile" ON public.users;
DROP POLICY IF EXISTS "Admins can view all users" ON public.users;
DROP POLICY IF EXISTS "Admins can update user roles" ON public.users;
DROP POLICY IF EXISTS "Users can view own applications" ON public.seller_applications;
DROP POLICY IF EXISTS "Admins can view all applications" ON public.seller_applications;
DROP POLICY IF EXISTS "Users can create applications" ON public.seller_applications;
DROP POLICY IF EXISTS "Users can create own applications" ON public.seller_applications;
DROP POLICY IF EXISTS "Admins can update applications" ON public.seller_applications;
DROP POLICY IF EXISTS "Users can view own tickets" ON public.tickets;
DROP POLICY IF EXISTS "Admins can view all tickets" ON public.tickets;
DROP POLICY IF EXISTS "Users can insert own tickets" ON public.tickets;
DROP POLICY IF EXISTS "Users can create own tickets" ON public.tickets;
DROP POLICY IF EXISTS "Admins can update tickets" ON public.tickets;
DROP POLICY IF EXISTS "Event creators can view tickets for their events" ON public.tickets;
DROP POLICY IF EXISTS "Event creators can update tickets for their events" ON public.tickets;
DROP POLICY IF EXISTS "Users can view own submissions" ON public.event_submissions;
DROP POLICY IF EXISTS "Admins can view all submissions" ON public.event_submissions;
DROP POLICY IF EXISTS "Sellers can create submissions" ON public.event_submissions;
DROP POLICY IF EXISTS "Users can update own submissions" ON public.event_submissions;
DROP POLICY IF EXISTS "Admins can update all submissions" ON public.event_submissions;

-- 2. Create custom types for permissions and roles
CREATE TYPE public.app_permission AS ENUM ('events.delete', 'events.approve', 'users.manage', 'applications.manage');
CREATE TYPE public.app_role AS ENUM ('admin', 'seller', 'user');

-- 3. Create user_roles table (separate from users table)
CREATE TABLE IF NOT EXISTS public.user_roles (
  id        bigint generated by default as identity primary key,
  user_id   uuid references auth.users on delete cascade not null,
  role      app_role not null,
  unique (user_id, role)
);

-- 4. Create role_permissions table
CREATE TABLE IF NOT EXISTS public.role_permissions (
  id           bigint generated by default as identity primary key,
  role         app_role not null,
  permission   app_permission not null,
  unique (role, permission)
);

-- 5. Insert default permissions
INSERT INTO public.role_permissions (role, permission) VALUES
  ('admin', 'events.delete'),
  ('admin', 'events.approve'),
  ('admin', 'users.manage'),
  ('admin', 'applications.manage'),
  ('seller', 'events.delete') -- sellers can delete their own events
ON CONFLICT (role, permission) DO NOTHING;

-- 6. Migrate existing user roles to new table
INSERT INTO public.user_roles (user_id, role)
SELECT id, role::app_role 
FROM public.users 
WHERE role IS NOT NULL
ON CONFLICT (user_id, role) DO NOTHING;

-- 7. Create the auth hook function
CREATE OR REPLACE FUNCTION public.custom_access_token_hook(event jsonb)
RETURNS jsonb
LANGUAGE plpgsql
STABLE
AS $$
  DECLARE
    claims jsonb;
    user_role public.app_role;
  BEGIN
    -- Fetch the user role in the user_roles table
    SELECT role INTO user_role FROM public.user_roles WHERE user_id = (event->>'user_id')::uuid;
    
    claims := event->'claims';
    
    IF user_role IS NOT NULL THEN
      -- Set the claim
      claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
    ELSE
      claims := jsonb_set(claims, '{user_role}', '"user"');
    END IF;
    
    -- Update the 'claims' object in the original event
    event := jsonb_set(event, '{claims}', claims);
    
    -- Return the modified event
    RETURN event;
  END;
$$;

-- 8. Grant permissions for the auth hook
GRANT USAGE ON SCHEMA public TO supabase_auth_admin;
GRANT EXECUTE ON FUNCTION public.custom_access_token_hook TO supabase_auth_admin;
REVOKE EXECUTE ON FUNCTION public.custom_access_token_hook FROM authenticated, anon, public;
GRANT ALL ON TABLE public.user_roles TO supabase_auth_admin;
REVOKE ALL ON TABLE public.user_roles FROM authenticated, anon, public;

-- 9. Create RLS policy for user_roles table
CREATE POLICY "Allow auth admin to read user roles" ON public.user_roles
AS PERMISSIVE FOR SELECT
TO supabase_auth_admin
USING (true);

-- 10. Create authorize function for RLS policies
CREATE OR REPLACE FUNCTION public.authorize(
  requested_permission app_permission
)
RETURNS boolean AS $$
DECLARE
  bind_permissions int;
  user_role public.app_role;
BEGIN
  -- Fetch user role from JWT claims
  SELECT (auth.jwt() ->> 'user_role')::public.app_role INTO user_role;
  
  SELECT count(*)
  INTO bind_permissions
  FROM public.role_permissions
  WHERE role_permissions.permission = requested_permission
    AND role_permissions.role = user_role;
    
  RETURN bind_permissions > 0;
END;
$$ LANGUAGE plpgsql STABLE SECURITY DEFINER SET search_path = '';

-- 11. Create simple RLS policies using the authorize function
-- Events policies
CREATE POLICY "Anyone can view approved events" ON public.events 
FOR SELECT USING (is_approved = true);

CREATE POLICY "Users can view own events" ON public.events 
FOR SELECT USING (auth.uid() = created_by OR auth.uid() = user_id);

CREATE POLICY "Admins can view all events" ON public.events 
FOR SELECT USING (authorize('events.approve'));

CREATE POLICY "Sellers can create events" ON public.events 
FOR INSERT WITH CHECK (auth.uid() = created_by);

CREATE POLICY "Users can update own events" ON public.events 
FOR UPDATE USING (auth.uid() = created_by OR auth.uid() = user_id);

CREATE POLICY "Admins can update all events" ON public.events 
FOR UPDATE USING (authorize('events.approve'));

-- Seller applications policies
CREATE POLICY "Users can view own applications" ON public.seller_applications 
FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Admins can view all applications" ON public.seller_applications 
FOR SELECT USING (authorize('applications.manage'));

CREATE POLICY "Users can create own applications" ON public.seller_applications 
FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Admins can update applications" ON public.seller_applications 
FOR UPDATE USING (authorize('applications.manage'));

-- Tickets policies
CREATE POLICY "Users can view own tickets" ON public.tickets 
FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Event creators can view tickets for their events" ON public.tickets 
FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM public.events 
    WHERE events.id = tickets.event_id 
    AND (events.created_by = auth.uid() OR events.user_id = auth.uid())
  )
);

CREATE POLICY "Admins can view all tickets" ON public.tickets 
FOR SELECT USING (authorize('users.manage'));

CREATE POLICY "Users can create own tickets" ON public.tickets 
FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Admins can update tickets" ON public.tickets 
FOR UPDATE USING (authorize('users.manage'));

-- Event submissions policies
CREATE POLICY "Users can view own submissions" ON public.event_submissions 
FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Admins can view all submissions" ON public.event_submissions 
FOR SELECT USING (authorize('applications.manage'));

CREATE POLICY "Users can create submissions" ON public.event_submissions 
FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own submissions" ON public.event_submissions 
FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Admins can update all submissions" ON public.event_submissions 
FOR UPDATE USING (authorize('applications.manage'));

-- 12. Add your user as admin
-- Replace with your actual user ID from auth.users table
-- You can find this by running: SELECT id, email FROM auth.users;
-- INSERT INTO public.user_roles (user_id, role) VALUES ('your-user-id-here', 'admin');

-- 13. Success message
SELECT 'RBAC system implemented! Now you need to:' as step_1;
SELECT '1. Go to Supabase Dashboard > Authentication > Hooks' as step_2;
SELECT '2. Enable the custom_access_token_hook function' as step_3;
SELECT '3. Add your user ID to user_roles table as admin' as step_4;
SELECT '4. Then Force Admin Role button should work!' as step_5;
