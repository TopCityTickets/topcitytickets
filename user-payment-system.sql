-- User Bank Account & Payment Methods Table
-- This table stores user payment preferences and Stripe customer info
-- Run this in Supabase SQL Editor

-- 1. Create user_payment_methods table
CREATE TABLE IF NOT EXISTS public.user_payment_methods (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users on delete cascade not null,
  stripe_customer_id text,
  stripe_setup_intent_id text,
  stripe_payment_method_id text,
  payment_method_type text default 'card', -- 'card', 'bank_account', 'sepa_debit'
  last_four text,
  brand text, -- 'visa', 'mastercard', 'bank_account'
  is_default boolean default false,
  is_active boolean default true,
  metadata jsonb default '{}',
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(user_id, stripe_payment_method_id)
);

-- 2. Enable RLS
ALTER TABLE public.user_payment_methods ENABLE ROW LEVEL SECURITY;

-- 3. Create RLS policies
CREATE POLICY "Users can view own payment methods" ON public.user_payment_methods
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own payment methods" ON public.user_payment_methods
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own payment methods" ON public.user_payment_methods
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own payment methods" ON public.user_payment_methods
  FOR DELETE USING (auth.uid() = user_id);

CREATE POLICY "Admins can view all payment methods" ON public.user_payment_methods
  FOR SELECT USING (authorize('users.manage'));

-- 4. Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_user_payment_methods_user_id ON public.user_payment_methods(user_id);
CREATE INDEX IF NOT EXISTS idx_user_payment_methods_stripe_customer ON public.user_payment_methods(stripe_customer_id);
CREATE INDEX IF NOT EXISTS idx_user_payment_methods_default ON public.user_payment_methods(user_id, is_default) WHERE is_default = true;

-- 5. Create trigger for updated_at
CREATE TRIGGER update_user_payment_methods_updated_at
  BEFORE UPDATE ON public.user_payment_methods
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- 6. Create user_stripe_accounts table for sellers (Stripe Connect)
CREATE TABLE IF NOT EXISTS public.user_stripe_accounts (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users on delete cascade not null unique,
  stripe_account_id text unique,
  account_status text default 'pending', -- 'pending', 'active', 'restricted', 'inactive'
  details_submitted boolean default false,
  charges_enabled boolean default false,
  payouts_enabled boolean default false,
  requirements jsonb default '{}',
  capabilities jsonb default '{}',
  metadata jsonb default '{}',
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- 7. Enable RLS on user_stripe_accounts
ALTER TABLE public.user_stripe_accounts ENABLE ROW LEVEL SECURITY;

-- 8. Create RLS policies for Stripe accounts
CREATE POLICY "Users can view own stripe account" ON public.user_stripe_accounts
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can update own stripe account" ON public.user_stripe_accounts
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Sellers can create stripe accounts" ON public.user_stripe_accounts
  FOR INSERT WITH CHECK (
    auth.uid() = user_id AND
    (authorize('events.delete') OR authorize('applications.manage'))
  );

CREATE POLICY "Admins can view all stripe accounts" ON public.user_stripe_accounts
  FOR SELECT USING (authorize('users.manage'));

-- 9. Create indexes
CREATE INDEX IF NOT EXISTS idx_user_stripe_accounts_user_id ON public.user_stripe_accounts(user_id);
CREATE INDEX IF NOT EXISTS idx_user_stripe_accounts_stripe_id ON public.user_stripe_accounts(stripe_account_id);
CREATE INDEX IF NOT EXISTS idx_user_stripe_accounts_status ON public.user_stripe_accounts(account_status);

-- 10. Create trigger for updated_at
CREATE TRIGGER update_user_stripe_accounts_updated_at
  BEFORE UPDATE ON public.user_stripe_accounts
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

SELECT 'User payment methods and Stripe Connect tables created!' as result;
